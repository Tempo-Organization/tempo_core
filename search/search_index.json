{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Tempo Core","text":""},{"location":"to_do_lists/configs_and_settings/","title":"Configs and settings","text":""},{"location":"to_do_lists/configs_and_settings/#expanded-tokens","title":"Expanded Tokens:","text":"<ul> <li>[ ] expanded tokens for configuration, works with env vars, up a directory, path separator         references:                 https://code.visualstudio.com/docs/editor/variables-reference,                 https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes</li> </ul> <p>fix it so all settings are loaded and saved from one place, there are several functions that don't follow this</p> <ul> <li>[ ] add toml support</li> </ul> <p>workspace config project config mod specific config game config</p> <p>config versions</p>"},{"location":"to_do_lists/documentation/","title":"Documentation","text":"<ul> <li><code>github actions example with zipping files</code></li> <li><code>pre-commit example</code> clarify in readme all the tools it downloads under own license/credit them all again</li> </ul>"},{"location":"to_do_lists/hot_keys/","title":"Hot keys","text":""},{"location":"to_do_lists/hot_keys/#hot-keys-to-make","title":"Hot Keys To Make:","text":"<ul> <li>[ ] General Hotkey functionality</li> <li>[ ] Close game hotkey</li> <li>[ ] Run script again hotkey</li> <li>[ ] Bring Unreal Engine to front hotkey</li> <li>[ ] Bring game to front hotkey</li> <li>[ ] Close all hotkey (game, engine, and instances of tempo)</li> </ul>"},{"location":"to_do_lists/iostore/","title":"Iostore","text":""},{"location":"to_do_lists/iostore/#iostore","title":"Iostore:","text":"<ul> <li>[ ] recheck over symlink logic for create iostore mods, same with sig logic</li> <li>[ ] non engine iostore, file_extemsions for iostore</li> <li>[ ] iostore repackaging more testing, ubulk stuff, try newer unreal engine versions</li> <li>[ ] finish iostore manual repackaging logic, check the following commands:         full run         full run all         test mods         test mods all         generate mods         generate mods all</li> </ul>"},{"location":"to_do_lists/later_later/","title":"Later Later","text":""},{"location":"to_do_lists/later_later/#later-later","title":"Later Later:","text":"<ul> <li>[ ] retoc commands/functionality</li> <li>[ ] repak commands/functionality</li> <li>[ ] zentools commands/functionality</li> <li>[ ] aes_dumpster commands/functionality</li> <li>[ ] generate project files for uproject</li> <li>[ ] uproject, uplugin, engine ini edits, for popular things, maybe also generic, default map change, game instance,</li> <li>[ ] generate uproject from win 64 exe, will need the unreal engine version</li> <li>[ ] unpack/repack game/mods</li> <li>[ ] list game/mod contents</li> <li>[ ]</li> <li>[ ] linux support</li> <li>[ ] logic for mod making to scan collection contentsEE</li> </ul> <p>cli commands/new launch json entries:         - [ ] get unreal engine version, uses patternsleuth         - [ ] get aes key, uses patternsleuth, or aesdumpster         - [ ] get uproject name</p> <p>init command, interactive, makes configs and stuff add to path upon install from install sources make install sources</p>"},{"location":"to_do_lists/later_later/#later-later-later","title":"Later Later Later:","text":"<ul> <li>[ ] interactive wrappers</li> <li>[ ] Mod Conflict Checker</li> <li>[ ] diff game and file list, and backup diff, so later on can cleanup game list and restore from backup</li> <li>[ ] compile all blueprints commandlet usage, maybe somehow setup for any commandlets</li> <li>[ ] layout support command</li> <li>[ ] compatible game list, more for less techy people, since the tool works on virtually all games</li> </ul> <p>automate asset import for meshes/skeletons/textures/physics assets, pal/da, etc.... and various properties</p> <p>check hatch, uv, ruff, pyinstaller, etc... for inspiration and patterns</p>"},{"location":"to_do_lists/localization/","title":"Localization","text":"<p>using existing localization system to localize all text</p>"},{"location":"to_do_lists/main/","title":"Main","text":"<p>init command</p> <ul> <li><code>cli command add to ini</code></li> <li><code>cli command remove from ini</code></li> <li><code>cli command add to text file</code></li> <li><code>cli command remove from text file</code></li> <li><code>cli command git stuff</code></li> <li><code>cli command gen engine stuff</code></li> <li><code>cli command open game dir</code></li> <li><code>cli command open game paks dir</code></li> <li><code>cli command open mod releases dir</code></li> <li><code>cli command open dist dir</code></li> <li><code>cli command open persistent mods dir</code></li> <li><code>cli command open unreal auto mod dir</code></li> <li><code>cli command open uproject dir</code></li> <li><code>cli command open provided dir</code></li> <li><code>cli command open provided file in default opener</code> create empty text file add new line to text file remove from text file by start, end, contains, etc.... create new json file</li> </ul> <p>add to/remove/replace  contains/starts_with/ends_with</p>"},{"location":"to_do_lists/maybe_later/","title":"Maybe later","text":"<p>cli commands/new launch json entries:         - [ ] dump usmappings</p> <ul> <li>[ ] automate installing from egs</li> </ul>"},{"location":"to_do_lists/optimizations/","title":"Optimizations","text":"<ul> <li>[ ] Switch to <code>pathlib</code> from strings</li> <li>[ ] Engine pak making compression variants (different types, in one run), defaults to compressed currently, can only do one type in one run right now</li> </ul>"},{"location":"to_do_lists/validation/","title":"Validation","text":"<ul> <li>[ ] check uproject for ini that contains if assign chunk id is enabled, and warn not to use it if so</li> </ul>"}]}